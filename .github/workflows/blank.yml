# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Build at 00:00 on every 12th day-of-month.
  schedule:
    - cron: "0 0 */12 * *"
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
    paths-ignore: [ '**/README.md' ]
  pull_request:
    branches: [ main ]
    paths-ignore: [ '**/README.md' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-stable"
  build-stable:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Prerequisites
        run: |
          sudo dpkg --add-architecture amd64
          sudo apt update
          sudo apt install \
          cmake \
          pkg-config \
          git \
          wget \
          libao-dev \
          libasound2-dev \
          libavcodec-dev \
          libavformat-dev \
          libbluetooth-dev \
          libenet-dev \
          libgtk2.0-dev \
          liblzo2-dev \
          libminiupnpc-dev \
          libopenal-dev \
          libpulse-dev \
          libreadline-dev \
          libsfml-dev \
          libsoil-dev \
          libsoundtouch-dev \
          libswscale-dev \
          libusb-1.0-0-dev \
          libwebkit2gtk-4.0-dev \
          libxext-dev \
          libxrandr-dev \
          portaudio19-dev \
          zlib1g-dev \
          libudev-dev \
          libevdev-dev \
          libmbedtls-dev \
          libcurl4-openssl-dev \
          libegl1-mesa-dev \
          libpng-dev \
          qtbase5-private-dev \
          libxxf86vm-dev \
          x11proto-xinerama-dev
          sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa -y
          sudo apt update
          sudo apt install gcc-9 g++-9 gcc-10 g++-10 gcc-11 g++-11 g++-12 gcc-12 g++-13 gcc-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-13 --slave /usr/bin/gcov gcov /usr/bin/gcov-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 90 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 80 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 60 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 40 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          wget -q "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage" -O linuxdeploy ; chmod a+x linuxdeploy
          wget -q "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -O appimagetool ; chmod a+x appimagetool
          wget -q "https://github.com/AppImage/AppImageKit/releases/download/continuous/AppRun-x86_64" -O AppRun ; chmod a+x AppRun
          git clone https://github.com/dolphin-emu/dolphin.git dolphin-emu
          mkdir lucas/
          mkdir lucas/usr/
          cp dolphin-emu.desktop dolphin-emu.png lucas/
          cp AppRun lucas/
          cd ./dolphin-emu
          git submodule update --init --recursive
          mkdir Build && cd Build
          cmake .. -DLINUX_LOCAL_DEV=true -DCMAKE_INSTALL_PREFIX="/home/runner/work/Dolphin_emu_Appimage/Dolphin_emu_Appimage/lucas/usr/"
          make install
          cd ..
          cd ..

      # Runs a set of commands using the runners shell
      - name: Build appimage
        run: |
         
          ./linuxdeploy --appdir lucas/
          ARCH=x86_64 ./appimagetool -n lucas/

      - name: release
        uses: "marvinpinto/action-automatic-releases@6273874b61ebc8c71f1a61b2d98e234cf389b303"
        with:
          title: Continuous build
          automatic_release_tag: continuous-stable
          prerelease: false
          draft: false
          files: /home/runner/work/Dolphin_emu_Appimage/Dolphin_emu_Appimage/*.AppImage*
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
